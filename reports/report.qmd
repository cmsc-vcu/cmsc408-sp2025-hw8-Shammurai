---
Title: Homework 8 - World Bank Analysis
---
GITHUB URL:  <https://github.com/cmsc-vcu/cmsc408-sp2025-hw8-Shammurai>


# Problem Background


```{python}
from helpers import create_database_engine, run_sql_and_return_df, run_sql_and_return_html, create_db_wrapper, execute_ddl_from_file, execute_ddl

# Load these variables from .env file.
config_map = {
  'user': "CMSC408_HW8_USER",
  'password': "CMSC408_HW8_PASSWORD",
  'host': "CMSC408_HW8_HOST",
  'database': "CMSC408_HW8_DB_NAME"
}

cnx,config = create_db_wrapper( config_map )
  
```


```{python}
# Do a quick test of the connection and trap the errors better!

run_sql_and_return_html(cnx,"""
select
  table_schema, table_name, table_rows
from
  information_schema.tables
where
  table_schema in ('world_bank_data')
""")

```

# Exercises

In the following exercises, write the SQL as requested to discover the answer.

## Task 1

How many records are in the country table?  

```{python}
# How many records are in the world_bank_data.wdi_country table?
# (skills: select, aggregate)

run_sql_and_return_html(cnx,"""
SELECT COUNT(*) AS "Row Count"
FROM   world_bank_data.wdi_country;
""")

```

## Task 2

Explore the first 5 records in the country table.

```{python}
## write out the first 10 records and look at the columns
## Do you see any blanks or missing data?
## (skills: select, limit)

run_sql_and_return_html(cnx,"""
select
  *
from 
  world_bank_data.wdi_country
limit 5
""")

```


## Task 3

List all non-countries.

```{python}
## task 3
## Which records are NOT for countries, that is they're for regions or groups of countries.
## How can you tell?
## Once you figure it out, write a query to list all the non-countries
## (skills: select, where)

run_sql_and_return_html(cnx, """
SELECT `Short Name` AS short_name
FROM world_bank_data.wdi_country
WHERE (Region IS NULL OR TRIM(Region) = '')
  AND (`Income Group` IS NULL OR TRIM(`Income Group`) = '')
ORDER BY `Short Name`;
""")

```

## Task 4

Create your own copy of WDI_Country containing just countries.

```{python}
## task 4
## The WDI table clearly contains information for countries and non-countries
## using CREATE TABLE ... SELECT from WHERE syntax.
## Finally, below write a query to return the number
## of records in the new table.
## (skills: select, aggregate)

execute_ddl(cnx, """
DROP TABLE IF EXISTS wdi_country_clean;
CREATE TABLE wdi_country_clean AS
SELECT *
FROM world_bank_data.wdi_country
WHERE Region IS NOT NULL AND TRIM(Region) <> ''
  AND `Income Group` IS NOT NULL AND TRIM(`Income Group`) <> '';
""")

run_sql_and_return_html(cnx, """
SELECT COUNT(*) AS country_count
FROM wdi_country_clean;
""")
```

## Task 5

According to the World Bank, in 2020 there were how many countries in the world?

```{python}
## (skills: select, aggregate)

run_sql_and_return_html(cnx,"""
SELECT COUNT(*) AS countries_in_2020
FROM wdi_country_clean;
""")

```

## Task 6

What are all unique values of region in the wdi_country table?

```{python}
## Let's investigate the country_region field.
## What is the domain of the country_region field? That is,
## what are the unique values found there?
## (there are several possible ways to code this in SQL)
## (skills: select, aggregate, order by)

run_sql_and_return_html(cnx,"""
SELECT DISTINCT Region
FROM   wdi_country_clean
ORDER BY Region;
""")

```

## Task 7

How many countries are in each region?

```{python}
## How many countries are in each region?
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
SELECT Region,
       COUNT(*) AS country_count
FROM   wdi_country_clean
GROUP  BY Region
ORDER  BY country_count DESC;
""")

```

## Task 8

List the country full names and regions for all countries in north america.

```{python}
## List the country full names and regions for all countries in north america
## (skills: select, where, order by)

run_sql_and_return_html(cnx,"""
SELECT `Short Name` AS country_short_name,
       `Long Name` AS country_full_name,
       Region
FROM   wdi_country_clean
WHERE  Region = 'North America'
ORDER BY country_short_name;
""")

```

## Task 9

```{python}
## The last World Cup soccer tournament was hosted by Qatar.
## What region contains Qatar?  List the region, country short name and full name
## (skills: select, where)

run_sql_and_return_html(cnx,"""
SELECT Region,
       `Short Name` AS country_short_name,
       `Long Name`  AS country_full_name
FROM   wdi_country_clean
WHERE  `Short Name` = 'Qatar';
""")

```

## Task 10

```{python}
## There are two abbreviation fields in the data country_abbr and country_wb_abbr.
## List the country code, short name, abbr, wb_abbr and region for all the countries
## where the abbr and wb_abbr are different.
## (skills: select, where, order by)

run_sql_and_return_html(cnx,"""
SELECT `Country Code`,
       `Short Name`,
       `2-alpha code` AS abbr,
       `WB-2 code`    AS wb_abbr,
       Region
FROM   wdi_country_clean
WHERE  `2-alpha code` IS NOT NULL
  AND  `WB-2 code` IS NOT NULL
  AND  `2-alpha code` <> `WB-2 code`
ORDER BY `Short Name`;
""")

```

## Task 11

```{python}
## Now, let's investigate the "income category" field.
## List the income categories and the number of countries in each
## income category in descending order of most countries to least.
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
SELECT `Income Group` AS Income_Group,
       COUNT(*) AS country_count
FROM   wdi_country_clean
GROUP  BY `Income Group`
ORDER  BY country_count DESC;
""")

```

## Task 12

```{python}
## Mystery task.  Looking at the table from Task 11 (anything odd?) write the
## next obvious query based on the results in the table.
## At a minimum, your query should put country short name in the first column.
## you will be scored on the number of records returned and the value(s) 
## in the first column.

run_sql_and_return_html(cnx,"""
SELECT `Short Name`, `Income Group`
FROM   wdi_country_clean
WHERE  `Income Group` IS NULL
ORDER  BY `Short Name`;
""")

```

## Task 13

```{python}
## OK, this HAS to be an error. Let's make a assumption that the country 
## in question, because they are oil-rich, are "high income".  
## Write an update comment to correct the issue.
## NOTE - if you get this wrong, all subsequent tables will be wrong!

execute_ddl(cnx,"""
UPDATE wdi_country_clean
SET `Income Group` = 'High income'
WHERE `Short Name` = 'Venezuela';
COMMIT;
""")

run_sql_and_return_html(cnx,"""
SELECT `Short Name`, `Income Group`, 'Updated' AS status
FROM wdi_country_clean
WHERE `Short Name` = 'Venezuela';
""")

```

## Task 14

```{python}
## Write a single query that show the number of countries in each 
## "Region"-"Income Group" pair.  The table should have 3 columns:
## region, income group, and no.of.countries.
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
SELECT Region,
       `Income Group`,
       COUNT(*) AS no_of_countries
FROM   wdi_country_clean
GROUP  BY Region, `Income Group`
ORDER  BY Region, `Income Group`;
""")

```

## Task 15

```{python}
## Examine the result from task 14. It would be really cool to
## present the results of this table in a 2-D form, with 
## columns for each income category (high, upper middle, lower middle, low, other)
## regions down the side, and the pair-wise count inside each cell.
## Using CASE statements, DO IT!  BE SURE to include the countries without
## an income category.

## HINT - your query should return 6 columns: the region name, one
## column for each of the income categories (e.g., High, Upper middle, etc.)
## and a column for the row totals.
## (skills: select, aggregate, group by, nested query)

run_sql_and_return_html(cnx,"""
SELECT Region,
       SUM(CASE WHEN `Income Group` = 'High income' THEN 1 ELSE 0 END) AS High_income,
       SUM(CASE WHEN `Income Group` = 'Upper middle income' THEN 1 ELSE 0 END) AS Upper_middle_income,
       SUM(CASE WHEN `Income Group` = 'Lower middle income' THEN 1 ELSE 0 END) AS Lower_middle_income,
       SUM(CASE WHEN `Income Group` = 'Low income' THEN 1 ELSE 0 END) AS Low_income,
       SUM(CASE WHEN `Income Group` IS NULL OR `Income Group` = '' THEN 1 ELSE 0 END) AS Other,
       COUNT(*) AS Row_Total
FROM   wdi_country_clean
GROUP  BY Region
ORDER  BY Region;
""")

```

## Task 16

```{python}
## Wow! what a cool table!  It is very interesting to see where the money
## sits around the world.  Using the general approach from Task 14 above
## and write a query to return the single region with the most lower-income
## countries.

## Your query should return 3 columns, the number of 
## low-income countries, the region name and the income group

## PUT THE NUMBER FIRST! (use: count, region name, income group)
## (skills: select, aggregate, group by, nested query, order by, limit)

run_sql_and_return_html(cnx,"""
SELECT COUNT(*) AS low_income_count,
       Region,
       'Low income' AS income_group
FROM   wdi_country_clean
WHERE  `Income Group` = 'Low income'
GROUP  BY Region
ORDER  BY low_income_count DESC
LIMIT 1;
""")

```

## Task 17

```{python}
## Are you getting the hand of this? Good! We need to take a look at all
## the countries in the same region and with the same income category as
## the Marshall Islands.
## For each country that matches, print their country code, short name,
## region and income category, by order of their short name.  As a hint,
## the country code for the Marshall Islands is MHL.
## (skills: select, where, subquery)

run_sql_and_return_html(cnx,"""
SELECT `Country Code`,
       `Short Name`,
       Region,
       `Income Group`
FROM   wdi_country_clean
WHERE  (Region, `Income Group`) = (
          SELECT Region, `Income Group`
          FROM   wdi_country_clean
          WHERE  `Country Code` = 'MHL'
       )
ORDER  BY `Short Name`;
""")

```

## Task 18

```{python}
## OK - let's raise the heat in the kitchen! Review the output from task 14.
## You'll see that some of the regions do not contain all of the income
## levels.  For example, the Europe & Central Asia region does not have
## any low income countries.
##
## CHALLENGE - using a SINGLE SQL statement, write a table that contains every
## combination of region and income category (including the missing '') values!
##
## THEN add a WHERE clause to only show the values that were missing from
## the original pairings!
##
## HINT - there should be AT MOST [# of regions]x[# of income cats] = 28
## rows in your final table, and there are 22 rows returned in the query
## in Task 14.  (FYI - I get 6 rows in my final table.)
## (skills: select, where, subqueries, joins)

run_sql_and_return_html(cnx,"""
WITH regions AS (
  SELECT DISTINCT Region FROM wdi_country_clean
), incomes AS (
  SELECT DISTINCT IFNULL(`Income Group`,'') AS `Income Group` FROM wdi_country_clean
), pairs AS (
  SELECT r.Region, i.`Income Group`
  FROM   regions r
  CROSS  JOIN incomes i
)
SELECT p.Region, p.`Income Group`,
       COUNT(w.`Short Name`) AS missing_count
FROM   pairs p
LEFT   JOIN wdi_country_clean w
       ON w.Region = p.Region AND IFNULL(w.`Income Group`,'') = p.`Income Group`
WHERE  w.Region IS NULL
GROUP BY p.Region, p.`Income Group`
ORDER  BY p.Region, p.`Income Group`;
""")

```

## Task 19

```{python}
## Hot enough, yet?  Let's go for ghost-pepper HOT!  Now let's build some
## percentage tables.  For example, across the entire sample, what
## is the percentage of total countries in each income category?
##
## As a first step, build off the result from task 14 and create a table with
## six columns (region, income cat, country count, sum of countries in region,
## sum of countries by income and total sum countries).
##
## THEN, add a 7th column calculating the percent of total for each,
## region-income pair.
##
## actually calculating percentages and print out a table will be a
## slam dunk after this!
## (skills: select, where, subqueries, joins, aggregate functions)

run_sql_and_return_html(cnx,"""
WITH base AS (
  SELECT Region,
         IFNULL(`Income Group`,'') AS `Income Group`, COUNT(*) AS country_cnt
  FROM   wdi_country_clean
  GROUP  BY Region, `Income Group`
), totals AS (
  SELECT SUM(country_cnt) AS grand_total FROM base
), region_tot AS (
  SELECT Region, SUM(country_cnt) AS region_total FROM base GROUP BY Region
), income_tot AS (
  SELECT `Income Group`, SUM(country_cnt) AS income_total FROM base GROUP BY `Income Group`
)
SELECT b.Region, b.`Income Group`, b.country_cnt, r.region_total, i.income_total, t.grand_total,
ROUND(b.country_cnt * 100.0 / t.grand_total, 2) AS pct_of_total
FROM base b
JOIN region_tot r USING (Region)
JOIN income_tot i USING (`Income Group`)
JOIN totals t;
""")

```

## Task 20

```{python}
## SLAM DUNK TIME!  Using the resulting table CTEs from Task 19,
## print table similar to the table in Task 15, with Income group in the
## columns, Region in the rows and Percent of total in each cell of the table.

run_sql_and_return_html(cnx,"""
WITH pct AS (
  SELECT Region,
         IFNULL(`Income Group`,'') AS `Income Group`,
         ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM wdi_country_clean), 2) AS pct_total
  FROM   wdi_country_clean
  GROUP  BY Region, `Income Group`
)
SELECT Region,
       SUM(CASE WHEN `Income Group` = 'High income' THEN pct_total ELSE 0 END) AS High_income_pct,
       SUM(CASE WHEN `Income Group` = 'Upper middle income' THEN pct_total ELSE 0 END) AS Upper_middle_income_pct,
       SUM(CASE WHEN `Income Group` = 'Lower middle income' THEN pct_total ELSE 0 END) AS Lower_middle_income_pct,
       SUM(CASE WHEN `Income Group` = 'Low income' THEN pct_total ELSE 0 END) AS Low_income_pct,
       SUM(CASE WHEN `Income Group` IS NULL OR `Income Group` = '' THEN pct_total ELSE 0 END) AS Other_pct
FROM   pct
GROUP  BY Region
ORDER  BY Region;
""")

```

## Task 21

```{python}
## ANOTHER DUNK!  Using the resulting table CTEs from Task 19,
## print a table listing the number, totals and percentage of countries
## by income category.

## (This is much simpler than task 20!)

run_sql_and_return_html(cnx,"""
SELECT `Income Group`, COUNT(*) AS country_count,
       (SELECT COUNT(*) FROM wdi_country_clean) AS total,
       ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM wdi_country_clean), 2) AS percentage
FROM wdi_country_clean
GROUP BY `Income Group`
ORDER BY country_count DESC;
""")

```


# Reflection

1. Reflect on the SQL skills you used throughout these exercises. Which skills do you feel most confident in, and which do you think need more practice? How has this assignment helped you build or reinforce specific SQL competencies?

This assignment helped me recognize how often real-world data requires cleaning and restructuring before any meaningful analysis can begin.

2. Problem-Solving Approach: Describe your approach to tackling the more complex tasks (like Tasks 18, 23, and 24). How did you break down these problems, and what steps did you take when you encountered challenges? How would you approach a similar problem differently in the future?

For complex tasks like 18, 19, and 20, I broke each problem into logical parts. For example, in Task 18 I first listed distinct regions and income groups separately, then used a CROSS JOIN to generate every combination. After that, I applied a LEFT JOIN and filtered for missing combinations. When I got stuck, I printed intermediate outputs and verified the shape of each subquery before combining them. If I had to do it again, I’d draw the desired output structure first, then write queries to match the shape step-by-step instead of trying to build everything at once. If I had to do it again, I’d draw the desired output structure first, then write queries to match the shape step-by-step instead of trying to build everything at once.


3. Learning Takeaways: Consider the overall learning experience from this assignment. What were the biggest takeaways about working with SQL for data analysis and transformation? How do you think these skills will apply in real-world scenarios or future coursework?

The biggest takeaway is that SQL is not just about extracting data—it’s a powerful tool for reshaping, validating, and presenting insights. I also saw how valuable common operations like counting groups, handling nulls, and structuring output for human readability really are. These skills apply directly to real-world tasks like business reporting, KPI dashboards, and data validation in analytics pipelines. Understanding how to transform raw data into clean summaries is essential for both coursework and job-related analysis.

# README

A quality README is an important part of EVERY project. Using the Quarto *include* command we're including a copy of your README in the project report so that a human can evaluate it.

Make sure that you edit the README so that it's explanatory!  Note that you don't need a readme within the *reports* folder for this assignment. We're only
focused on the root *README.md*.

[Here is some info](https://www.freecodecamp.org/news/how-to-write-a-good-readme-file/) on how to write a good README!

::: {style="background:lightgray; margin-left:20px; border-top: 3px solid black; border-bottom: 3px solid black; padding-left:20px; padding-right:20px"}
{{< include ../README.md >}}
:::
