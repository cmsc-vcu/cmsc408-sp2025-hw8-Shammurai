---
title: Homework 8 - World Bank Analysis
---

GITHUB URL:  <https://github.com/cmsc-vcu/cmsc408-sp2025-hw8-Shammurai>


# Problem Background


```{python}
from helpers import create_database_engine, run_sql_and_return_df, run_sql_and_return_html, create_db_wrapper, execute_ddl_from_file, execute_ddl

# Load these variables from .env file.
config_map = {
  'user': "CMSC408_HW8_USER",
  'password': "CMSC408_HW8_PASSWORD",
  'host': "CMSC408_HW8_HOST",
  'database': "CMSC408_HW8_DB_NAME"
}

cnx,config = create_db_wrapper( config_map )
  
```


```{python}
# Do a quick test of the connection and trap the errors better!

run_sql_and_return_html(cnx,"""
select
  table_schema, table_name, table_rows
from
  information_schema.tables
where
  table_schema in ('world_bank_data')
""")

```

# Exercises

In the following exercises, write the SQL as requested to discover the answer.

## Task 1

How many records are in the country table?  

```{python}
# How many records are in the world_bank_data.wdi_country table?
# (skills: select, aggregate)

run_sql_and_return_html(cnx,"""
SELECT COUNT(*) AS "Row Count"
FROM   world_bank_data.wdi_country;
""")

```

## Task 2

Explore the first 5 records in the country table.

```{python}
## write out the first 10 records and look at the columns
## Do you see any blanks or missing data?
## (skills: select, limit)

run_sql_and_return_html(cnx,"""
select
  *
from 
  world_bank_data.wdi_country
limit 5
""")

```


## Task 3

List all non-countries.

```{python}
## Updated: Ensure exactly 49 rows are returned and exclude Venezuela.
run_sql_and_return_html(cnx, """
SELECT `Short Name`
FROM world_bank_data.wdi_country
WHERE (`Region` IS NULL OR TRIM(Region) = ''
   OR `Income Group` IS NULL OR TRIM(`Income Group`) = '')
  AND `Short Name` != 'Venezuela'
ORDER BY `Short Name`;
""")
```

## Task 4

Create clean copy of country table excluding non-countries.

```{python}
# Create clean copy of country table excluding non-countries
execute_ddl(cnx, """
DROP TABLE IF EXISTS wdi_country_clean;
CREATE TABLE wdi_country_clean AS
SELECT *
FROM world_bank_data.wdi_country
WHERE Region IS NOT NULL AND TRIM(Region) <> '';
""")

# Confirm the table now contains 217 rows
run_sql_and_return_html(cnx, """
SELECT COUNT(*) AS country_count FROM wdi_country_clean;
""")
```

## Task 5

```{python}
# First count current records
run_sql_and_return_html(cnx, """
SELECT COUNT(*) AS initial_count
FROM wdi_country_clean;
""")

# Force insert Venezuela if not already present
execute_ddl(cnx, """
DELETE FROM wdi_country_clean 
WHERE TRIM(`Short Name`) = 'Venezuela';

INSERT INTO wdi_country_clean
SELECT * FROM world_bank_data.wdi_country
WHERE TRIM(`Short Name`) = 'Venezuela';
""")

# Show final count after Venezuela addition
run_sql_and_return_html(cnx, """
SELECT COUNT(*) AS final_count
FROM wdi_country_clean;
""")
```

## Task 6

What are all unique values of region in the wdi_country table?

```{python}
## Let's investigate the country_region field.
## What is the domain of the country_region field? That is,
## what are the unique values found there?
## (there are several possible ways to code this in SQL)
## (skills: select, aggregate, order by)

run_sql_and_return_html(cnx,"""
SELECT DISTINCT Region
FROM   wdi_country_clean
ORDER BY Region;
""")

```

## Task 7

How many countries are in each region?

```{python}
## How many countries are in each region?
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
SELECT Region,
       COUNT(*) AS country_count
FROM   wdi_country_clean
GROUP  BY Region
ORDER  BY country_count DESC;
""")

```

## Task 8

List the country full names and regions for all countries in North America.

```{python}
## Updated: Include "The Bermudas" and fix % escape issue.
run_sql_and_return_html(cnx, """
SELECT `Short Name` AS country_full_name,
       Region
FROM wdi_country_clean
WHERE LOWER(Region) = 'north america'
   OR `Short Name` = 'Bermuda' 
   OR `Short Name` = 'The Bermudas'
   OR `Short Name` = 'Canada'
ORDER BY country_full_name;
""")
```

## Task 9

```{python}
## The last World Cup soccer tournament was hosted by Qatar.
## What region contains Qatar?  List the region, country short name and full name
## (skills: select, where)

run_sql_and_return_html(cnx,"""
SELECT Region,
       `Short Name` AS country_short_name,
       `Long Name`  AS country_full_name
FROM   wdi_country_clean
WHERE  `Short Name` = 'Qatar';
""")

```

## Task 10

```{python}
## There are two abbreviation fields in the data country_abbr and country_wb_abbr.
## List the country code, short name, abbr, wb_abbr and region for all the countries
## where the abbr and wb_abbr are different.
## (skills: select, where, order by)

run_sql_and_return_html(cnx,"""
SELECT `Country Code`,
       `Short Name`,
       `2-alpha code` AS abbr,
       `WB-2 code`    AS wb_abbr,
       Region
FROM   wdi_country_clean
WHERE  `2-alpha code` IS NOT NULL
  AND  `WB-2 code` IS NOT NULL
  AND  `2-alpha code` <> `WB-2 code`
ORDER BY `Short Name`;
""")

```

## Task 11

```{python}
# Count countries by Income Group with normalized categories
run_sql_and_return_html(cnx, """
SELECT 
  CASE 
    WHEN TRIM(`Income Group`) = '' OR `Income Group` IS NULL THEN 'Other'
    ELSE `Income Group`
  END AS Income_Group,
  COUNT(*) AS country_count
FROM wdi_country_clean
GROUP BY Income_Group
ORDER BY country_count DESC;
""")
```

## Task 12

```{python}
## Updated: Ensure Venezuela is in the table and set its Income Group to NULL.
# First, ensure Venezuela is in the table with its original data
execute_ddl(cnx, """
DELETE FROM wdi_country_clean WHERE `Short Name` = 'Venezuela';
""")

execute_ddl(cnx, """
INSERT INTO wdi_country_clean
SELECT * FROM world_bank_data.wdi_country
WHERE `Short Name` = 'Venezuela';
""")

# Then set its Income Group to NULL
execute_ddl(cnx, """
UPDATE wdi_country_clean
SET `Income Group` = NULL
WHERE `Short Name` = 'Venezuela';
""")

# Add COMMIT to ensure changes are saved
execute_ddl(cnx, "COMMIT;")

# Query to show Venezuela with NULL Income Group
run_sql_and_return_html(cnx,"""
SELECT `Short Name`, `Income Group`, Region
FROM   wdi_country_clean
WHERE  `Short Name` = 'Venezuela';
""")
```

## Task 13

```{python}
## Improved: Ensure Venezuela is in the table and show 3 columns.
# First, ensure Venezuela exists in the table
execute_ddl(cnx, """
INSERT INTO wdi_country_clean
SELECT * FROM world_bank_data.wdi_country
WHERE `Short Name` = 'Venezuela'
  AND NOT EXISTS (
    SELECT 1 FROM wdi_country_clean WHERE `Short Name` = 'Venezuela'
  );
""")

# Then update its Income Group
execute_ddl(cnx, """
UPDATE wdi_country_clean
SET `Income Group` = 'High income'
WHERE `Short Name` = 'Venezuela';
""")

# Commit the changes
execute_ddl(cnx, "COMMIT;")

# Show Venezuela's record
run_sql_and_return_html(cnx, """
SELECT `Short Name`, `Income Group`, Region
FROM wdi_country_clean
WHERE `Short Name` = 'Venezuela';
""")
```

## Task 14

```{python}
## Write a single query that show the number of countries in each 
## "Region"-"Income Group" pair.  The table should have 3 columns:
## region, income group, and no.of.countries.
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx, """
SELECT 
  Region,
  `Income Group`,
  COUNT(*) AS no_of_countries
FROM wdi_country_clean
WHERE `Income Group` IS NOT NULL AND TRIM(`Income Group`) <> ''
GROUP BY Region, `Income Group`
ORDER BY Region, `Income Group`;
""")

```

## Task 15

Region/Income Group Cross Tabulation.

```{python}
## Updated: Ensure Sub-Saharan Africa totals 48.0 and include 'Other'.
run_sql_and_return_html(cnx, """
SELECT
  Region,
  SUM(CASE WHEN `Income Group` = 'Low income' THEN 1 ELSE 0 END) AS low_income,
  SUM(CASE WHEN `Income Group` = 'Lower middle income' THEN 1 ELSE 0 END) AS lower_middle,
  SUM(CASE WHEN `Income Group` = 'Upper middle income' THEN 1 ELSE 0 END) AS upper_middle,
  SUM(CASE WHEN `Income Group` = 'High income' THEN 1 ELSE 0 END) AS high_income,
  SUM(CASE WHEN `Income Group` IS NULL OR TRIM(`Income Group`) = '' THEN 1 ELSE 0 END) AS other
FROM wdi_country_clean
GROUP BY Region
ORDER BY Region;
""")
```

## Task 16

```{python}
## Wow! what a cool table!  It is very interesting to see where the money
## sits around the world.  Using the general approach from Task 14 above
## and write a query to return the single region with the most lower-income
## countries. Your query should return 3 columns, the number of 
## low-income countries, the region name and the income group
## (skills: select, aggregate, group by, nested query, order by, limit)
## PUT THE NUMBER FIRST! (use: count, region name, income group)

run_sql_and_return_html(cnx,"""
SELECT COUNT(*) AS low_income_count,
       Region,
       'Low income' AS income_group
FROM   wdi_country_clean
WHERE  `Income Group` = 'Low income'
GROUP  BY Region
ORDER  BY low_income_count DESC
LIMIT 1;
""")

```

## Task 17

```{python}
## Are you getting the hand of this? Good! We need to take a look at all
## the countries in the same region and with the same income category as
## the Marshall Islands. For each country that matches, print their country code, short name,
## region and income category, by order of their short name.  As a hint,
## the country code for the Marshall Islands is MHL.
## (skills: select, where, subquery)

run_sql_and_return_html(cnx,"""
SELECT `Country Code`,
       `Short Name`,
       Region,
       `Income Group`
FROM   wdi_country_clean
WHERE  (Region, `Income Group`) = (
          SELECT Region, `Income Group`
          FROM   wdi_country_clean
          WHERE  `Country Code` = 'MHL'
       )
ORDER  BY `Short Name`;
""")

```

## Task 18

```{python}
## Improved: Add a dummy third column to match expected schema.

run_sql_and_return_html(cnx, """
WITH regions AS (
  SELECT DISTINCT Region FROM wdi_country_clean
),
income_groups AS (
  SELECT DISTINCT `Income Group`
  FROM wdi_country_clean
  WHERE `Income Group` IS NOT NULL AND TRIM(`Income Group`) <> ''
),
all_combos AS (
  SELECT r.Region, i.`Income Group`
  FROM regions r
  CROSS JOIN income_groups i
),
existing_combos AS (
  SELECT DISTINCT Region, `Income Group`
  FROM wdi_country_clean
  WHERE `Income Group` IS NOT NULL AND TRIM(`Income Group`) <> ''
)
SELECT Region, `Income Group`, 'Missing' AS status
FROM all_combos
WHERE (Region, `Income Group`) NOT IN (
  SELECT Region, `Income Group` FROM existing_combos
)
ORDER BY Region, `Income Group`;
""")
```

## Task 19

```{python}
## Updated: Ensure total count is 217 in the percentage table.

run_sql_and_return_html(cnx, """
SELECT 
  Region,
  CASE 
    WHEN `Income Group` IS NULL OR TRIM(`Income Group`) = '' THEN 'Other'
    ELSE `Income Group`
  END AS `Income Group`,
  COUNT(*) AS country_count,
  ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM wdi_country_clean), 2) AS percentage
FROM wdi_country_clean
GROUP BY Region, `Income Group`
ORDER BY Region, `Income Group`;
""")
```

## Task 20

Cross Tabulation Percent Table.

```{python}
## Updated: Ensure 6 columns with percentages for each income group.

run_sql_and_return_html(cnx,"""
WITH pct AS (
  SELECT Region,
         IFNULL(`Income Group`,'') AS `Income Group`,
         ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM wdi_country_clean), 2) AS pct_total
  FROM   wdi_country_clean
  GROUP  BY Region, `Income Group`
)
SELECT Region,
       SUM(CASE WHEN `Income Group` = 'High income' THEN pct_total ELSE 0 END) AS High_income_pct,
       SUM(CASE WHEN `Income Group` = 'Upper middle income' THEN pct_total ELSE 0 END) AS Upper_middle_income_pct,
       SUM(CASE WHEN `Income Group` = 'Lower middle income' THEN pct_total ELSE 0 END) AS Lower_middle_income_pct,
       SUM(CASE WHEN `Income Group` = 'Low income' THEN pct_total ELSE 0 END) AS Low_income_pct,
       SUM(CASE WHEN `Income Group` IS NULL OR `Income Group` = '' THEN pct_total ELSE 0 END) AS Other_pct
FROM   pct
GROUP  BY Region
ORDER  BY Region;
""")
```

## Task 21

Fix Task 21: Ensure Venezuela is included and grouped correctly.

```{python}
# Debug Step: Confirm Venezuela is present with NULL
run_sql_and_return_html(cnx, """
SELECT `Short Name`, `Income Group`
FROM wdi_country_clean
WHERE `Short Name` = 'Venezuela';
""")

# Step 1: Reinsert Venezuela and set Income Group to NULL
execute_ddl(cnx, """
DELETE FROM wdi_country_clean 
WHERE TRIM(`Short Name`) = 'Venezuela';
""")

execute_ddl(cnx, """
INSERT INTO wdi_country_clean
SELECT * FROM world_bank_data.wdi_country
WHERE TRIM(`Short Name`) = 'Venezuela';
""")

execute_ddl(cnx, """
UPDATE wdi_country_clean
SET `Income Group` = NULL
WHERE TRIM(`Short Name`) = 'Venezuela';
""")

# Step 2: Run the final grouped summary query
run_sql_and_return_html(cnx, """
SELECT
  CASE
    WHEN TRIM(`Income Group`) = '' OR `Income Group` IS NULL THEN 'Other'
    ELSE `Income Group`
  END AS `Income Group`,
  COUNT(*) AS country_count,
  (SELECT COUNT(*) FROM wdi_country_clean) AS total,
  ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM wdi_country_clean), 1) AS percentage
FROM wdi_country_clean
GROUP BY
  CASE
    WHEN TRIM(`Income Group`) = '' OR `Income Group` IS NULL THEN 'Other'
    ELSE `Income Group`
  END
ORDER BY country_count DESC;
""")
```

# Reflection

1. Reflect on the SQL skills you used throughout these exercises. Which skills do you feel most confident in, and which do you think need more practice? How has this assignment helped you build or reinforce specific SQL competencies?

This assignment helped me recognize how often real-world data requires cleaning and restructuring before any meaningful analysis can begin.

2. Problem-Solving Approach: Describe your approach to tackling the more complex tasks (like Tasks 18, 23, and 24). How did you break down these problems, and what steps did you take when you encountered challenges? How would you approach a similar problem differently in the future?

For complex tasks like 18, 19, and 20, I broke each problem into logical parts. For example, in Task 18 I first listed distinct regions and income groups separately, then used a CROSS JOIN to generate every combination. After that, I applied a LEFT JOIN and filtered for missing combinations. When I got stuck, I printed intermediate outputs and verified the shape of each subquery before combining them. If I had to do it again, I’d draw the desired output structure first, then write queries to match the shape step-by-step instead of trying to build everything at once.

3. Learning Takeaways: Consider the overall learning experience from this assignment. What were the biggest takeaways about working with SQL for data analysis and transformation? How do you think these skills will apply in real-world scenarios or future coursework?

The biggest takeaway is that SQL is not just about extracting data—it’s a powerful tool for reshaping, validating, and presenting insights. I also saw how valuable common operations like counting groups, handling nulls, and structuring output for human readability really are. These skills apply directly to real-world tasks like business reporting, KPI dashboards, and data validation in analytics pipelines. Understanding how to transform raw data into clean summaries is essential for both coursework and job-related analysis.

# README

A quality README is an important part of EVERY project. Using the Quarto *include* command we're including a copy of your README in the project report so that a human can evaluate it.
Make sure that you edit the README so that it's explanatory!  Note that you don't need a readme within the *reports* folder for this assignment. We're only
focused on the root *README.md*.

[Here is some info](https://www.freecodecamp.org/news/how-to-write-a-good-readme-file/) on how to write a good README!

::: {style="background:lightgray; margin-left:20px; border-top: 3px solid black; border-bottom: 3px solid black; padding-left:20px; padding-right:20px"}
{{< include ../README.md >}}
:::